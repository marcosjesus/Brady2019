unit uDataModule;

interface

uses
  Vcl.Forms,
  System.SysUtils, System.Classes, FireDAC.Stan.Intf, FireDAC.Stan.Option,
  FireDAC.Stan.Error, FireDAC.UI.Intf, FireDAC.Phys.Intf, FireDAC.Stan.Def,
  FireDAC.Phys, FireDAC.Comp.Client, FireDAC.Stan.Pool, FireDAC.Stan.Async,
  Data.DB, FireDAC.Stan.Param, FireDAC.DatS, FireDAC.DApt.Intf,
  FireDAC.Comp.DataSet, Data.Bind.Components, Data.Bind.DBScope,
  FireDAC.Phys.IBBase, FireDAC.Phys.FB;

type
  TdInovarAuto = class(TDataModule)
    FDMemTableParametrosConexao: TFDMemTable;
    FDMemTableParametrosConexaoservidor: TStringField;
    FDMemTableParametrosConexaoarquivo: TStringField;
    FDMemTableParametrosConexaousuario: TStringField;
    FDMemTableParametrosConexaosenha: TStringField;
    BindSourceDBParametrosConexao: TBindSourceDB;
    FDConnectionFirebird: TFDConnection;
    FDPhysFBDriverLink: TFDPhysFBDriverLink;
    FDMemTableClientes: TFDMemTable;
    FDMemTableClientesCNPJ: TStringField;
    FDMemTableClientesRazaoSocial: TStringField;
    BindSourceDBClientes: TBindSourceDB;
    procedure DataModuleCreate(Sender: TObject);
    procedure DataModuleDestroy(Sender: TObject);
    procedure FDMemTableClientesCNPJValidate(Sender: TField);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  dInovarAuto: TdInovarAuto;

function isCNPJ(CNPJ: string): boolean;

implementation

{%CLASSGROUP 'Vcl.Controls.TControl'}

{$R *.dfm}

function isCNPJ(CNPJ: string): boolean;
var   dig13, dig14: string;
    sm, i, r, peso: integer;
begin
// length - retorna o tamanho da string do CNPJ (CNPJ é um número formado por 14 dígitos)
  if ((CNPJ = '00000000000000') or (CNPJ = '11111111111111') or
      (CNPJ = '22222222222222') or (CNPJ = '33333333333333') or
      (CNPJ = '44444444444444') or (CNPJ = '55555555555555') or
      (CNPJ = '66666666666666') or (CNPJ = '77777777777777') or
      (CNPJ = '88888888888888') or (CNPJ = '99999999999999') or
      (length(CNPJ) <> 14))
     then begin
            isCNPJ := false;
            exit;
          end;

// "try" - protege o código para eventuais erros de conversão de tipo através da função "StrToInt"
  try
{ *-- Cálculo do 1o. Digito Verificador --* }
    sm := 0;
    peso := 2;
    for i := 12 downto 1 do
    begin
// StrToInt converte o i-ésimo caractere do CNPJ em um número
      sm := sm + (StrToInt(CNPJ[i]) * peso);
      peso := peso + 1;
      if (peso = 10)
         then peso := 2;
    end;
    r := sm mod 11;
    if ((r = 0) or (r = 1))
       then dig13 := '0'
    else str((11-r):1, dig13); // converte um número no respectivo caractere numérico

{ *-- Cálculo do 2o. Digito Verificador --* }
    sm := 0;
    peso := 2;
    for i := 13 downto 1 do
    begin
      sm := sm + (StrToInt(CNPJ[i]) * peso);
      peso := peso + 1;
      if (peso = 10)
         then peso := 2;
    end;
    r := sm mod 11;
    if ((r = 0) or (r = 1))
       then dig14 := '0'
    else str((11-r):1, dig14);

{ Verifica se os digitos calculados conferem com os digitos informados. }
    if ((dig13 = CNPJ[13]) and (dig14 = CNPJ[14]))
       then isCNPJ := true
    else isCNPJ := false;
  except
    isCNPJ := false
  end;
end;


procedure TdInovarAuto.DataModuleCreate(Sender: TObject);
begin

  FDMemTableParametrosConexao.Open;
  if FileExists( ExtractFilePath(Application.ExeName) + 'db1.db' ) then
    FDMemTableParametrosConexao.LoadFromFile( ExtractFilePath(Application.ExeName) + 'db1.db', sfXML );

  FDMemTableClientes.Open;
  if FileExists( ExtractFilePath(Application.ExeName) + 'db2.db' ) then
    FDMemTableClientes.LoadFromFile( ExtractFilePath(Application.ExeName) + 'db2.db', sfXML );

end;

procedure TdInovarAuto.DataModuleDestroy(Sender: TObject);
begin

  if FDMemTableParametrosConexao.State in dsEditModes then
    FDMemTableParametrosConexao.Post;
  FDMemTableParametrosConexao.SaveToFile( ExtractFilePath(Application.ExeName) + 'db1.db', sfXML );

  if FDMemTableClientes.State in dsEditModes then
    FDMemTableClientes.Post;
  FDMemTableClientes.SaveToFile( ExtractFilePath(Application.ExeName) + 'db2.db', sfXML );

end;

procedure TdInovarAuto.FDMemTableClientesCNPJValidate(Sender: TField);
begin

  if not isCNPJ(Sender.AsString) then
    raise Exception.Create('CNPJ incorreto, verifique.');  

end;

end.
